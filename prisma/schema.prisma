generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  password  String
  email     String   @unique
  phoneNo   String
  address   String
  dob       DateTime
  city      String
  state     String
  zipcode   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admin")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  password  String
  email     String   @unique
  phoneNo   String
  address   String
  dob       DateTime
  city      String
  state     String
  zipcode   String

  role     Role      @default(CUSTOMER)
  orders   Order[]
  payments Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

model Product {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  barcodeId    String  @unique
  slug         String  @unique
  description  String
  image        String
  isReturnable Boolean @default(true)
  quantity     Int
  price        Float

  orders ProductOrder[]

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product")
}

model Category {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("category")
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  status     OrderStatus
  type       OrderType   @default(PICKUP)
  pickupTime DateTime?

  payment  Payment?
  products ProductOrder[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order")
}

model Payment {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  amount        Float
  tax           Float
  paymentMethod PaymentMethod
  cardNumber    Int?
  address       String?

  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId String @unique @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payment")
}

model ProductOrder {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  quantity Int
  amount   Float

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String  @db.ObjectId

  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_order")
}

enum OrderType {
  PICKUP
  DELIVERY
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  CASH
}

enum OrderStatus {
  PENDING
  DELIVERED
  READY
  ACCEPTED
  COMPLETED
  CANCELLED
}

enum Role {
  ADMIN
  CUSTOMER
}
